--
-- netbeans_cpp.lua
-- Generate a C/C++ netbeans project.
-- Copyright (c) 2013 Santo Pfingsten
--
	  function premake.tree.traverse2(t, fn, includeroot)

		local donode, dochildren
		donode = function(node, fn, depth)
			if node.isremoved then 
				return 
			end
			if fn.onnode then 
				fn.onnode(node, depth) 
			end
			if #node.children > 0 then
				if fn.onbranchenter then
					fn.onbranchenter(node, depth)
				end
				if fn.onbranch then 
					fn.onbranch(node, depth) 
				end
				dochildren(node, fn, depth + 1)
				if fn.onbranchexit then 
					fn.onbranchexit(node, depth) 
				end
			else
				if fn.onleaf then 
					fn.onleaf(node, depth) 
				end
			end
		end
		
		dochildren = function(parent, fn, depth)
			-- this goofy iterator allows nodes to be removed during the traversal
			local i = 1
			while i <= #parent.children do
				local node = parent.children[i]
				donode(node, fn, depth)
				if node == parent.children[i] then
					i = i + 1
				end
			end
		end
		
		if includeroot then
			donode(t, fn, 0)
		else
			dochildren(t, fn, 0)
		end
	end  
	
	
	function premake.netbeans_rootelements(prj, d, tagname)
		local tr = premake.project.buildsourcetree(prj)
		premake.tree.sort(tr)
		premake.tree.traverse2(tr, {
			onbranch = function(node, depth)
				if depth == 1 then
					_p(d, '<%s>%s</%s>', tagname, premake.esc(path.join('../', node.path)), tagname)
				end
			end,
		})
	end
	
	function premake.netbeans_project_type(kind)
		if kind == "WindowedApp" or kind == "ConsoleApp" then
			return 1
		elseif kind == "StaticLib" then
			return 3
		elseif kind == "SharedLib" then
			return 2
		end
	end
	
	function premake.netbeans_project(prj)
		-- create a shortcut to the compiler interface
		local cc = premake.gettool(prj)
		
		-- build a list of supported target platforms that also includes a generic build
		local platforms = premake.filterplatforms(prj.solution, cc.platforms, "Native")
		
		_p('<?xml version="1.0" encoding="UTF-8"?>')
		_p('<!-- %s project autogenerated by Premake -->', premake.action.current().shortname)
		_p('<project xmlns="http://www.netbeans.org/ns/project/1">')
		_p(1, '<type>org.netbeans.modules.cnd.makeproject</type>')
		_p(1, '<configuration>')
		_p(2, '<data xmlns="http://www.netbeans.org/ns/make-project/1">')
		_p(3, '<name>%s</name>', premake.esc(prj.name))
		_p(3, '<c-extensions>c</c-extensions>')
		_p(3, '<cpp-extensions>cpp</cpp-extensions>')
		_p(3, '<header-extensions>h</header-extensions>')
		_p(3, '<sourceEncoding>UTF-8</sourceEncoding>')
		_p(3, '<make-dep-projects/>')
		_p(3, '<sourceRootList>')
		
		premake.netbeans_rootelements(prj, 4, 'sourceRootElem')
		_p(3, '</sourceRootList>')
		_p(3, '<confList>')
		for _, platform in ipairs(platforms) do
			for cfg in premake.eachconfig(prj, platform) do
				_p(4, '<confElem>')
				_p(5, '<name>%s</name>', premake.esc(cfg.shortname))
				_p(5, '<type>%d</type>', premake.netbeans_project_type(cfg.kind))
				_p(4, '</confElem>')
			end
		end
		_p(3, '</confList>')
		_p(2, '</data>')
		_p(1, '</configuration>')
		_p('</project>')
	end
	
	function premake.netbeans_cpp_makefile(prj)
		_p('# Environment')
		_p('MKDIR=mkdir')
		_p('CP=cp')
		_p('CCADMIN=CCadmin')
		_p('')
		
		_p('# build')
		_p('build: .build-post')
		_p('.build-pre:')
		_p('.build-post: .build-impl')
		_p('')

		_p('# clean')
		_p('clean: .clean-post')
		_p('.clean-pre:')
		_p('.clean-post: .clean-impl')
		_p('')

		_p('# clobber')
		_p('clobber: .clobber-post')
		_p('.clobber-pre:')
		_p('.clobber-post: .clobber-impl')
		_p('')

		_p('# all')
		_p('all: .all-post')
		_p('.all-pre:')
		_p('.all-post: .all-impl')
		_p('')

		_p('# build tests')
		_p('build-tests: .build-tests-post')
		_p('.build-tests-pre:')
		_p('.build-tests-post: .build-tests-impl')
		_p('')

		_p('# run tests')
		_p('test: .test-post')
		_p('.test-pre: build-tests')
		_p('.test-post: .test-impl')
		_p('')

		_p('# help')
		_p('help: .help-post')
		_p('.help-pre:')
		_p('.help-post: .help-impl')
		_p('')
		
		_p('# include project implementation makefile')
		_p('include nbproject/Makefile-impl.mk')
		_p('')

		_p('# include project make variables')
		_p('include nbproject/Makefile-variables.mk')
	end
	
	function premake.netbeans_cpp(prj)
		-- create a shortcut to the compiler interface
		local cc = premake.gettool(prj)
		
		-- build a list of supported target platforms that also includes a generic build
		local platforms = premake.filterplatforms(prj.solution, cc.platforms, "Native")

		_p('<?xml version="1.0" encoding="UTF-8"?>')
		_p('<!-- %s project configurations autogenerated by Premake -->', premake.esc(premake.action.current().shortname))
		_p('<configurationDescriptor version="88">')
		_p(1, '<logicalFolder name="root" displayName="root" projectFiles="true" kind="ROOT">')
		
		local tr = premake.project.buildsourcetree(prj)
		premake.tree.sort(tr)
		premake.tree.traverse2(tr, {
			onbranchenter = function(node, depth)
				if depth > 0 then
					_p(depth + 1, '<logicalFolder name="%s" displayName="%s" projectFiles="true">', premake.esc(node.name), premake.esc(node.name))
				end
			end,
			onbranchexit = function(node, depth)
				if depth > 0 then
					_p(depth + 1, '</logicalFolder>')
				end
			end,
			
			onleaf = function(node, depth)
				_p(depth + 1, '<itemPath>%s</itemPath>', premake.esc(path.join('../', node.path)))
			end
		})
		
		_p(2, '<logicalFolder name="ExternalFiles" displayName="Important Files" projectFiles="false" kind="IMPORTANT_FILES_FOLDER">')
		_p(3, '<itemPath>Makefile</itemPath>')
		_p(2, '</logicalFolder>')

		_p(1, '</logicalFolder>')
		_p(1, '<sourceRootList>')
		premake.netbeans_rootelements(prj, 2, 'Elem')
		_p(1, '</sourceRootList>')
		_p(1, '<projectmakefile>Makefile</projectmakefile>')
		
		_p(1, '<confs>')
		-- create conf Debug, Release
		for _, platform in ipairs(platforms) do
			for cfg in premake.eachconfig(prj, platform) do
				premake.netbeans_cpp_conf(prj, cfg, cc)
			end
		end
		_p(1, '</confs>')
		_p('</configurationDescriptor>')

	end

	
--
-- Write a block of configuration settings.
--
	
	function premake.netbeans_cpp_conf(prj, cfg, cc)
		_p(2, '<conf name="%s" type="%d">', premake.esc(cfg.shortname), premake.netbeans_project_type(cfg.kind))
		_p(3, '<toolsSet>')
		_p(4, '<remote-sources-mode>LOCAL_SOURCES</remote-sources-mode>')
		_p(4, '<compilerSet>default</compilerSet>')
		_p(4, '<dependencyChecking>true</dependencyChecking>')
		_p(4, '<rebuildPropChanged>false</rebuildPropChanged>')
		_p(3, '</toolsSet>')
		_p(3, '<compileType>')
		
		premake.netbeans_cpp_conf_ctool(cfg, 'cTool', table.join(cc.getcppflags(cfg), cc.getcflags(cfg), cfg.buildoptions))
		premake.netbeans_cpp_conf_ctool(cfg, 'ccTool', table.join(cc.getcppflags(cfg), cc.getcflags(cfg), cfg.buildoptions))
		
		if cfg.kind == "StaticLib" then
			_p(4, '<archiverTool>')
			_p(5, '<output>%s</output>', premake.esc(path.join(path.join('../', cfg.buildtarget.directory), cfg.buildtarget.name)))
			_p(4, '</archiverTool>')
		else
			_p(4, '<linkerTool>')
			_p(5, '<linkerAddLib>')
			for _, libdir in ipairs(premake.getlinks(cfg, "siblings", "directory")) do
				_p(6, '<pElem>%s</pElem>', premake.esc(path.join('../', libdir)))
			end
			_p(5, '</linkerAddLib>')
			_p(5, '<linkerLibItems>')
			for _, libname in ipairs(premake.getlinks(cfg, "all", "system")) do
				_p(6, '<linkerLibLibItem>%s</linkerLibLibItem>', premake.esc(libname))
			end
			for _, libname in ipairs(premake.getlinks(cfg, "siblings", "basename")) do
				_p(6, '<linkerLibLibItem>%s</linkerLibLibItem>', premake.esc(libname))
			end
			_p(5, '</linkerLibItems>')
			_p(5, '<commandLine>%s</commandLine>', premake.esc(table.concat(table.join(cc.getldflags(cfg), cfg.linkoptions), " ")))
			_p(5, '<output>%s</output>', premake.esc(path.join(path.join('../', cfg.buildtarget.directory), cfg.buildtarget.name)))
			_p(4, '</linkerTool>')
		end
		_p(3, '</compileType>')
		
	-- There don't seem to be any netbeans settings for these:
	--	_p('  OBJDIR     = %s', premake.esc(cfg.objectsdir))		
	--	_p('  RESFLAGS  += $(DEFINES) $(INCLUDES) %s', table.concat(table.join(cc.getdefines(cfg.resdefines), cc.getincludedirs(cfg.resincludedirs), cfg.resoptions), " "))
		
	-- cfg.prebuildcommands, cfg.prelinkcommands, cfg.postbuildcommands
	--	if #cfg.prebuildcommands > 0 then
	--		_p('\t%s', table.implode(cfg.prebuildcommands, "", "", "\n\t"))
	--	end
		
		for _, file in ipairs(prj.files) do
			local tool = 3;
			if path.iscfile(file) then tool = 0
			elseif path.iscppfile(file) then tool = 1
			else tool = 3
			end
			_p(3, '<item path="%s" ex="false" tool="%d" flavor2="0"></item>', premake.esc(path.join('../', file)), tool)
		end
		_p(2, '</conf>')
	end

	function premake.netbeans_cpp_conf_ctool(cfg, toolName, flags)
		_p(4, '<%s>', toolName)
		_p(5, '<incDir>')
		for _, incdir in ipairs(cfg.includedirs) do
			_p(6, '<pElem>%s</pElem>', premake.esc(path.join('../', incdir)))
		end
		_p(5, '</incDir>')
		_p(5, '<preprocessorList>')
		for _, definename in ipairs(cfg.defines) do
			_p(6, '<Elem>%s</Elem>', premake.esc(definename))
		end
		_p(5, '</preprocessorList>')
		_p(5, '<commandLine>%s</commandLine>', premake.esc(table.concat(flags, " ")))
		_p(4, '</%s>', toolName)
	end
